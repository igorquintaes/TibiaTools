<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>Sobre</value>
  </data>
  <data name="AboutSourceCodeIn" xml:space="preserve">
    <value>Tibia Tools é um projeto Open Source. Toda a aplicação e seu respectivo código fonde pode ser encontrado em:</value>
  </data>
  <data name="AditionalValueByUnsplitedItems" xml:space="preserve">
    <value>Valor adicional por itens não divididos</value>
  </data>
  <data name="ButtonLastPlayersDeath" xml:space="preserve">
    <value>Últimas Mortes de Jogadores</value>
  </data>
  <data name="ButtonLootSplitter" xml:space="preserve">
    <value>Divisor e Contador de Loot</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ChooseOneBellowTools" xml:space="preserve">
    <value>Escolha uma das ferramentas abaixo:</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Fechar</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continuar</value>
  </data>
  <data name="EmptyPlayerItemList" xml:space="preserve">
    <value>A lista está vazia.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Ajuda</value>
  </data>
  <data name="HowItWorksLastDeaths" xml:space="preserve">
    <value>Como funciona:

A ferramenta é baseada apenas em jogadores online. É realizada uma busca das últimas mortes de players online e exibe o resultado em uma tabela com base nas últimas 3 horas. Ela pode ser útil para ver se o servidor está com freezer ou kicks.</value>
  </data>
  <data name="HowToUse" xml:space="preserve">
    <value>Como utilizar:</value>
  </data>
  <data name="HowToUseReadMe" xml:space="preserve">
    <value>Por favor, leia o arquivo readme que pode ser encontrado na página do projeto no GitHub: </value>
  </data>
  <data name="HuntPaid" xml:space="preserve">
    <value>O loot PAGOU. Não ouve nem lucro nem prejuízo.</value>
  </data>
  <data name="Image" xml:space="preserve">
    <value>Imagem</value>
  </data>
  <data name="IndividualProfit" xml:space="preserve">
    <value>O lucro de cada membro foi de {0} gps.</value>
  </data>
  <data name="IndividualWaste" xml:space="preserve">
    <value>O prejuízo de cada membro foi de {0} gps.</value>
  </data>
  <data name="InsertPlayerLoot" xml:space="preserve">
    <value>Insira todos os loots (dê look nos items)</value>
  </data>
  <data name="InsertPlayerQuantity" xml:space="preserve">
    <value>Insira a quantidade de jogadores:</value>
  </data>
  <data name="ItemsUnsplited" xml:space="preserve">
    <value>Itens que não foram possíveis de dividir:</value>
  </data>
  <data name="ItensToPlayerWasted" xml:space="preserve">
    <value>Itens para o jogador que gastou {0} gps.</value>
  </data>
  <data name="ItensToPlayerWastedAditional" xml:space="preserve">
    <value>Itens para o jogador que gastou {0} gps.
Como houve itens impossíveis de dividir, sugere que este jogador receba adicional de {1} gps.</value>
  </data>
  <data name="LanguageStr" xml:space="preserve">
    <value>Idioma:</value>
  </data>
  <data name="LastPlayersDeaths" xml:space="preserve">
    <value>Últimas Mortes de Jogadores</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Carregando</value>
  </data>
  <data name="LootSplitterResult" xml:space="preserve">
    <value>Divisor e Contador de Loot - Resultado</value>
  </data>
  <data name="LootSplitterStepOne" xml:space="preserve">
    <value>Divisor e Contador de Loot - Passo 1</value>
  </data>
  <data name="LootSplitterStepTwo" xml:space="preserve">
    <value>Divisor e Contador de Loot - Passo 2</value>
  </data>
  <data name="MoneySpentPlayerNun" xml:space="preserve">
    <value>Dinheiro gasto pelo jogador {0}:</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="OneItem" xml:space="preserve">
    <value>{0} (1 Item)</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Opções</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantidade</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Salvar</value>
  </data>
  <data name="Saved" xml:space="preserve">
    <value>Salvo</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Buscar</value>
  </data>
  <data name="SelectedWorldIsOffline" xml:space="preserve">
    <value>O mundo selecionado está offline.</value>
  </data>
  <data name="SelectWorld" xml:space="preserve">
    <value>Selecione o mundo:</value>
  </data>
  <data name="SelectWorldAndStart" xml:space="preserve">
    <value>Selecione um mundo e procure</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Configurações</value>
  </data>
  <data name="SuccefullSavedConfig" xml:space="preserve">
    <value>Sua configuração foi salva com sucesso!</value>
  </data>
  <data name="TotalProfit" xml:space="preserve">
    <value>LUCRO! Lucro total de {0} gps.</value>
  </data>
  <data name="TotalValue" xml:space="preserve">
    <value>Valor Total</value>
  </data>
  <data name="TotalValueObtained" xml:space="preserve">
    <value>Valor total obtido: {0} gps.</value>
  </data>
  <data name="TotalValueSpent" xml:space="preserve">
    <value>Valor total gasto: {0} gps.</value>
  </data>
  <data name="TotalWaste" xml:space="preserve">
    <value>PREJUÍZO! O prejuízo total foi de {0} gps.</value>
  </data>
  <data name="UnableToConnectTibiaWebsite" xml:space="preserve">
    <value>Não foi possível conectar-se ao tibia.com</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Valor</value>
  </data>
  <data name="ValueMemberNeedToPayToAnother" xml:space="preserve">
    <value>Valor para pagar a outro membro</value>
  </data>
  <data name="ValueMemberNeedToReciveAnother" xml:space="preserve">
    <value>Valor para receber de outro membro</value>
  </data>
  <data name="ValueOfItem" xml:space="preserve">
    <value>Valor de cada {0}:</value>
  </data>
  <data name="XItems" xml:space="preserve">
    <value>{0} ({1} Itens)</value>
  </data>
  <data name="AddPlayer" xml:space="preserve">
    <value>Adicionar jogador</value>
  </data>
  <data name="InsertPlayerName" xml:space="preserve">
    <value>Insira o nome do jogador:</value>
  </data>
  <data name="InvalidCharacterName" xml:space="preserve">
    <value>Nome de personagem inválido</value>
  </data>
  <data name="PlayerAlert" xml:space="preserve">
    <value>Alerta de Jogadores</value>
  </data>
  <data name="Now" xml:space="preserve">
    <value>Agora</value>
  </data>
  <data name="CharacterIsAlreadyInTable" xml:space="preserve">
    <value>O personagem digitado já se encontra na tabela</value>
  </data>
</root>